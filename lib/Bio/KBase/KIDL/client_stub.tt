package [% client_package_name %];

use JSON::RPC::Client;
use strict;
use Data::Dumper;
use URI;
use Bio::KBase::Exceptions;
[% IF authenticated -%]
use Bio::KBase::AuthToken;
[% END -%]

# Client version should match Impl version
# This is a Semantic Version number,
# http://semver.org
our $VERSION = "0.1.0";

=head1 NAME

[% client_package_name %]

=head1 DESCRIPTION

[% FOREACH module IN modules %]
[% module.module_doc %]
[% END %]

=cut

sub new
{
    my($class, $url, @args) = @_;
    
[% IF default_service_url -%]
    if (!defined($url))
    {
	$url = '[% default_service_url %]';
    }
[% END -%]

    my $self = {
	client => [% client_package_name %]::RpcClient->new,
	url => $url,
    };

[% IF authenticated -%]
    # This module requires authentication.
    #
    # We create an auth token, passing through the arguments that we were (hopefully) given.

    {
	my $token = Bio::KBase::AuthToken->new(@args);
	
	if ($token->error_message)
	{
	    die "Authentication failed: " . $token->error_message;
	}
	$self->{token} = $token->token;
	$self->{client}->{token} = $token->token;
    }
[% END -%]

    my $ua = $self->{client}->ua;	 
    my $timeout = $ENV{CDMI_TIMEOUT} || (30 * 60);	 
    $ua->timeout($timeout);
    bless $self, $class;
    #    $self->_validate_version();
    return $self;
}

[% FOREACH module IN modules %]
[% FOREACH method IN module.methods %]

=head2 [% method.name %]

  [% IF method.ret_vars -%][% method.ret_vars -%] = [% END -%]$obj->[% method.name %]([% method.arg_vars %])

=over 4

=item Parameter and return types

=begin html

<pre>
[% FOREACH docline IN method.arg_doc -%]
[% docline %]
[% END %]
</pre>

=end html

=begin text

[% FOREACH docline IN method.arg_doc -%]
[% docline %]
[% END %]

=end text

=item Description

[% method.doc %]

=back

=cut

sub [% method.name %]
{
    my($self, @args) = @_;

# Authentication: [% method.authentication %]

    if ((my $n = @args) != [% method.arg_count %])
    {
	Bio::KBase::Exceptions::ArgumentValidationError->throw(error =>
							       "Invalid argument count for function [% method.name %] (received $n, expecting [% method.arg_count %])");
    }
[% IF method.arg_count > 0 -%]
    {
	my([% method.arg_vars %]) = @args;

	my @_bad_arguments;
[% FOR param IN method.params -%]
        ([% param.validator %]) or push(@_bad_arguments, "Invalid type for argument [% param.index %] \"[% param.name %]\" (value was \"[% param.perl_var %]\")");
[% END -%]
        if (@_bad_arguments) {
	    my $msg = "Invalid arguments passed to [% method.name %]:\n" . join("", map { "\t$_\n" } @_bad_arguments);
	    Bio::KBase::Exceptions::ArgumentValidationError->throw(error => $msg,
								   method_name => '[% method.name %]');
	}
    }
[% END -%]

    my $result = $self->{client}->call($self->{url}, {
	method => "[% module.module_name %].[% method.name %]",
	params => \@args,
    });
    if ($result) {
	if ($result->is_error) {
	    Bio::KBase::Exceptions::JSONRPC->throw(error => $result->error_message,
					       code => $result->content->{code},
					       method_name => '[% method.name %]',
					      );
	} else {
[% IF method.ret_count > 0 -%]
	    return wantarray ? @{$result->result} : $result->result->[0];
[% ELSE -%]
	    return;
[% END -%]
	}
    } else {
        Bio::KBase::Exceptions::HTTP->throw(error => "Error invoking method [% method.name %]",
					    status_line => $self->{client}->status_line,
					    method_name => '[% method.name %]',
				       );
    }
}

[% END %]
[% END %]
sub version {
    my ($self) = @_;
    my $result = $self->{client}->call($self->{url}, {
        method => "[% module.module_name %].version",
        params => [],
    });
    if ($result) {
        if ($result->is_error) {
            Bio::KBase::Exceptions::JSONRPC->throw(
                error => $result->error_message,
                code => $result->content->{code},
                method_name => '[% method.name %]',
            );
        } else {
            return wantarray ? @{$result->result} : $result->result->[0];
        }
    } else {
        Bio::KBase::Exceptions::HTTP->throw(
            error => "Error invoking method [% method.name %]",
            status_line => $self->{client}->status_line,
            method_name => '[% method.name %]',
        );
    }
}

sub _validate_version {
    my ($self) = @_;
    my $svr_version = $self->version();
    my $client_version = $VERSION;
    my ($cMajor, $cMinor) = split(/\./, $client_version);
    my ($sMajor, $sMinor) = split(/\./, $svr_version);
    if ($sMajor != $cMajor) {
        Bio::KBase::Exceptions::ClientServerIncompatible->throw(
            error => "Major version numbers differ.",
            server_version => $svr_version,
            client_version => $client_version
        );
    }
    if ($sMinor < $cMinor) {
        Bio::KBase::Exceptions::ClientServerIncompatible->throw(
            error => "Client minor version greater than Server minor version.",
            server_version => $svr_version,
            client_version => $client_version
        );
    }
    if ($sMinor > $cMinor) {
        warn "New client version available for [% client_package_name %]\n";
    }
    if ($sMajor == 0) {
        warn "[% client_package_name %] version is $svr_version. API subject to change.\n";
    }
}

=head1 TYPES

[% FOREACH type IN module.types %]

=head2 [% type.name %]

=over 4

[% IF type.comment %]

=item Description

[% type.comment %]
[% END %]

=item Definition

=begin html

<pre>
[% type.english %]
</pre>

=end html

=begin text

[% type.english %]

=end text

=back

[% END %]

=cut

package [% client_package_name %]::RpcClient;
use base 'JSON::RPC::Client';

#
# Override JSON::RPC::Client::call because it doesn't handle error returns properly.
#

sub call {
    my ($self, $uri, $obj) = @_;
    my $result;

    if ($uri =~ /\?/) {
       $result = $self->_get($uri);
    }
    else {
        Carp::croak "not hashref." unless (ref $obj eq 'HASH');
        $result = $self->_post($uri, $obj);
    }

    my $service = $obj->{method} =~ /^system\./ if ( $obj );

    $self->status_line($result->status_line);

    if ($result->is_success) {

        return unless($result->content); # notification?

        if ($service) {
            return JSON::RPC::ServiceObject->new($result, $self->json);
        }

        return JSON::RPC::ReturnObject->new($result, $self->json);
    }
    elsif ($result->content_type eq 'application/json')
    {
        return JSON::RPC::ReturnObject->new($result, $self->json);
    }
    else {
        return;
    }
}


sub _post {
    my ($self, $uri, $obj) = @_;
    my $json = $self->json;

    $obj->{version} ||= $self->{version} || '1.1';

    if ($obj->{version} eq '1.0') {
        delete $obj->{version};
        if (exists $obj->{id}) {
            $self->id($obj->{id}) if ($obj->{id}); # if undef, it is notification.
        }
        else {
            $obj->{id} = $self->id || ($self->id('JSON::RPC::Client'));
        }
    }
    else {
        $obj->{id} = $self->id if (defined $self->id);
    }

    my $content = $json->encode($obj);

    $self->ua->post(
        $uri,
        Content_Type   => $self->{content_type},
        Content        => $content,
        Accept         => 'application/json',
	($self->{token} ? (Authorization => $self->{token}) : ()),
    );
}



1;
